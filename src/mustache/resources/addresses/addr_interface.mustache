package systems.comodal.hash.addresses;

import java.security.MessageDigest;
import systems.comodal.hash.{{digestHash}};
import systems.comodal.hash.{{checksumHash}};
import systems.comodal.hash.addresses.api.Addr;
import systems.comodal.hash.addresses.api.AddrFactory;
{{#versions}}
import systems.comodal.hash.addresses.gen.OffsetV{{versionString}}{{interfaceName}};
import systems.comodal.hash.addresses.gen.ReverseV{{versionString}}{{interfaceName}};
import systems.comodal.hash.addresses.gen.V{{versionString}}{{interfaceName}}Value;
{{/versions}}
import systems.comodal.hash.api.HashFactory;

public interface {{interfaceName}} extends Addr {

  default void getChecksum(final byte[] out, final int offset) {
    final MessageDigest messageDigest = getChecksumHashFactory().getMessageDigest();
    messageDigest.update(getVersion());
    update(messageDigest);
    final byte[] verDigestChecksum = messageDigest.digest(messageDigest.digest());
    System.arraycopy(verDigestChecksum, 0, out, offset, getChecksumLength());
  }

  enum Version implements AddrFactory<{{interfaceName}}> {

    {{#versions}}
    x{{versionString}}(new byte[]{{=<% %>=}}{<%={{ }}=%>{{versionBytes}}}) {
      @Override
      public {{interfaceName}} overlay(final byte[] digest) {
        return new V{{versionString}}{{interfaceName}}Value(digest);
      }

      @Override
      public {{interfaceName}} overlay(final byte[] digest, final int offset) {
        return new OffsetV{{versionString}}{{interfaceName}}(digest, offset);
      }

      @Override
      public {{interfaceName}} reverseOverlay(final byte[] digest,
          final int offset) {
        return new ReverseV{{versionString}}{{interfaceName}}(digest, offset);
      }
    },
    {{/versions}}
    ;

    private final byte[] version;
    private final int verDigestLength;
    private final int checksummedVerDigestLength;

    Version(final byte[] version) {
      this.version = version;
      this.verDigestLength = version.length + getDigestLength();
      this.checksummedVerDigestLength = verDigestLength + getChecksumLength();
    }

    @Override
    public int getDigestLength() {
      return {{digestHash}}.FACTORY.getDigestLength();
    }

    @Override
    public int getOffsetLength() {
      return {{digestHash}}.FACTORY.getOffsetLength();
    }

    @Override
    public int getVerDigestLength() {
      return verDigestLength;
    }

    @Override
    public byte[] getVersion() {
      return version;
    }

    @Override
    public int getChecksumLength() {
      return {{checksumLength}};
    }

    @Override
    public int getChecksummedVerDigestLength() {
      return checksummedVerDigestLength;
    }

    @Override
    public HashFactory<{{checksumHash}}> getChecksumHashFactory() {
      return {{checksumHash}}.FACTORY;
    }

    @Override
    public {{interfaceName}} create(final byte[] data, final int offset,
        final int len) {
      return overlay({{create}});
    }
  }
}